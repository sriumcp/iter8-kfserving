name: Build-test-and-push

# on:
#   push:
#     # Publish `main` as Docker `latest` image.
#     branches:
#       - main

#     # Publish `v1.2.3` tags as releases.
#     tags:
#       - v*

#   # Run tests for any PRs.
#   pull_request:

on: [pull_request, push]

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.0.1
        with:
          minikube version: 'v1.15.1'
          kubernetes version: 'v1.17.11'
          github token: ${{ secrets.GITHUB_TOKEN }}
          start args: --memory=6954 --cpus=4 --driver=docker   
      # - uses: imranismail/setup-kustomize@v1
      #   with:
      #     kustomize-version: "3.1.0"
      # - uses: opsgang/ga-setup-minikube@v0.1.1
      #   with:
      #     minikube-version: 1.15.1
      #     k8s-version: 1.17.11
      # - name: Starting minikube cluster
      #   run: |
      #     minikube start --memory=12000 --cpus=4 --kubernetes-version=v1.17.11 --driver=docker
      # - uses: engineerd/setup-kind@v0.5.0
      #   with:
      #     image: kindest/node:v1.17.11
      - run: eval $(minikube docker-env)
      - name: Build image
        run: docker build . --tag iter8-kfserving
      - name: Apply CRDs
        run: |
          kubectl apply -k https://github.com/iter8-tools/etc3/config/crd/?ref=main
          # super ugly and needs to be replaced
          kubectl apply -f tests/integration/inferenceservicecrd.yaml
          kubectl wait --for=condition=Established crds --all --timeout=5m
      - name: Setup experiment and Inference Service
        run: |
          kubectl create ns kfserving-test
          kubectl apply -f samples/common/sklearn-iris.yaml -n kfserving-test
          kubectl apply -f samples/experiments/example1.yaml -n kfserving-test
          kubectl create ns iter8-system
          kustomize build tests/rbacs | kubectl apply -f -
      - name: Get yq
        run: sudo snap install yq
      - name: Fix and launch start handler
        run: |
          cp resources/configmaps/handlers/start.yaml tests/integration/handlers/start.yaml
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].image iter8-kfserving
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].imagePullPolicy Never
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].env[0].value kfserving-test
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].env[1].value sklearn-iris-experiment-1
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].env[2].name IGNORE_INFERENCESERVICE_READINESS
          yq w -i tests/integration/handlers/start.yaml spec.template.spec.containers[0].env[2].value ignore

          echo "Fixed start handler"
          cat tests/integration/handlers/start.yaml

          echo "Creating start handler job ... "
          kubectl apply -f tests/integration/handlers/start.yaml -n iter8-system
          sleep 30
          echo ""
          echo "Job logs"
          kubectl logs --selector job-name=start -n iter8-system
          kubectl wait --for=condition=complete job/start -n iter8-system --timeout=30s
      - name: Check InferenceService and Experiment objects
        run: |
          echo "InferenceService object"
          kubectl get inferenceservice/sklearn-iris -n kfserving-test
          echo "Experiment object"
          kubectl get experiment/sklearn-iris-experiment-1 -n kfserving-test -o yaml

  # # Push image to GitHub Packages.
  # # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test

  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION


# name: "Test iter8-kfserving handlers"
# on: [pull_request, push]
# # Note: https://github.community/t/whats-the-recommended-way-to-pass-a-docker-image-to-the-next-job-in-a-workflow/17225/14
# jobs:
#   iter8-kfserving-build:
#     runs-on: ubuntu-18.04
#     services:
#       registry:
#         image: registry:2
#         ports:
#           - 5000:5000
#     steps:
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v1
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
#         with:
#           driver-opts: network=host
#       - name: Build and push to local registry
#         uses: docker/build-push-action@v2
#         with:
#           push: true
#           tags: localhost:5000/iter8/iter8-kfserving:latest
#       - name: Inspect
#         run: |
#           docker buildx imagetools inspect localhost:5000/iter8/iter8-kfserving:latest
#   iter8-kfserving-test:
#     runs-on: ubuntu-18.04
#     services:
#       registry:
#         image: registry:2
#         ports:
#           - 5000:5000
#     steps:
#       - name: Check if the image still around
#         run: |
#           docker image ls


#       # - uses: actions/checkout@master
#       # - uses: engineerd/setup-kind@v0.5.0
#       #   with:
#       #     image: kindest/node:v1.17.11
#       # - name: Cluster Info
#       #   run: |
#       #     kubectl cluster-info
#       #     echo "Present working directory: $(pwd)"
#       # - name: Apply CRDs
#       #   run: |
#       #      kubectl apply -k https://github.com/iter8-tools/etc3/config/crd/?ref=main
#       #      kubectl apply -f https://raw.githubusercontent.com/kubeflow/kfserving/master/config/crd/serving.kubeflow.org_inferenceservices.yaml
#       #      kubectl get crds
#       # - name: Setup experiment and Inference Service
#       #   run: |
#       #      kubectl create ns kfserving-test
#       #      kubectl apply -f samples/common/sklearn-iris.yaml -n kfserving-test
#       #      kubectl apply -f samples/experiments/example1.yaml -n kfserving-test
#       #      export EXPERIMENT_NAME=sklearn-iris-experiment-1
#       #      export EXPERIMENT_NAMESPACE=kfserving-test
#       #      source handlers/scripts/start.sh
#       #      echo "Inference Service"
#       #      kubectl get inferenceservice/sklearn-iris -n kfserving-test
#       #      kubectl get experiment/sklearn-iris-experiment-1 -n kfserving-test